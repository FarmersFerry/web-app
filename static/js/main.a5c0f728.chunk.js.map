{"version":3,"sources":["Components/Price/Price.js","App.js","serviceWorker.js","index.js"],"names":["Price","props","state","price","isNaN","nextProps","this","setState","toFixed","React","Component","App","bagsOfCorn","geese","total","number","getTotal","className","id","onClick","onChangeCornQuantity","onChangeGeeseQuantity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAmBeA,G,8DAfd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAEDC,MAAQ,CAAEC,MAAOC,MAAMH,EAAME,OAAS,EAAIF,EAAME,OAHnC,E,sEAMOE,GACzBC,KAAKC,SAAS,CAAEJ,MAAOC,MAAMC,EAAUF,OAAS,EAAIE,EAAUF,U,+BAI9D,OAAO,sCAASG,KAAKJ,MAAMC,MAAQ,KAAKK,QAAQ,Q,GAZ9BC,IAAMC,YC8DXC,E,4MA5DdT,MAAQ,CACPU,WAAY,EACZC,MAAO,EACPC,MAAO,G,uDAGCD,EAAOD,GACf,OAA8B,IAAtBC,EAAQD,K,2CAGIG,GACpB,IAAIH,EAAaN,KAAKJ,MAAMU,WAAaG,EACrCH,EAAa,IAAGA,EAAa,GAEjCN,KAAKC,SAAS,CAAEK,aAAYE,MAAOR,KAAKU,SAASV,KAAKJ,MAAMW,MAAOD,O,4CAG9CG,GACrB,IAAIF,EAAQP,KAAKJ,MAAMW,MAAQE,EAC3BF,EAAQ,IAAGA,EAAQ,GAEvBP,KAAKC,SAAS,CAAEM,QAAOC,MAAOR,KAAKU,SAASH,EAAOP,KAAKJ,MAAMU,gB,+BAGrD,IAAD,OACR,OACC,8BACC,qDACA,2CACc,kBAAC,EAAD,CAAOT,MAAO,MAG5B,yBAAKc,UAAU,eACd,oCACA,uBAAGC,GAAG,gBAAN,iBAAoCZ,KAAKJ,MAAMU,YAC/C,4BAAQM,GAAG,gBAAgBC,QAAS,kBAAM,EAAKC,qBAAqB,KAApE,KACA,4BAAQD,QAAS,kBAAM,EAAKC,qBAAqB,MAAjD,OACA,4BAAQD,QAAS,kBAAM,EAAKC,sBAAsB,MAAlD,OACA,4BAAQD,QAAS,kBAAM,EAAKC,sBAAsB,KAAlD,MAGD,yBAAKH,UAAU,eACd,qCACA,uBAAGC,GAAG,SAAN,UAAsBZ,KAAKJ,MAAMW,OACjC,4BAAQK,GAAG,iBAAiBC,QAAS,kBAAM,EAAKE,sBAAsB,KAAtE,KACA,4BAAQF,QAAS,kBAAM,EAAKE,sBAAsB,MAAlD,OACA,4BAAQF,QAAS,kBAAM,EAAKE,uBAAuB,MAAnD,OACA,4BAAQF,QAAS,kBAAM,EAAKE,uBAAuB,KAAnD,OAGCf,KAAKJ,MAAMW,OAAS,GAAKP,KAAKJ,MAAMU,YAAc,IAAM,yBAAKM,GAAG,SAAR,oBACxC,kBAAC,EAAD,CAAOf,MAAOG,KAAKJ,MAAMY,SAG1CR,KAAKJ,MAAMW,MAAQ,GAAKP,KAAKJ,MAAMU,WAAa,GAAK,yBAAKK,UAAU,SAAf,6B,GAvDxCR,IAAMC,WCQJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5c0f728.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Price.scss\";\n\nclass Price extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { price: isNaN(props.price) ? 0 : props.price };\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({ price: isNaN(nextProps.price) ? 0 : nextProps.price });\n\t}\n\n\trender() {\n\t\treturn <span>Â£{(this.state.price / 100).toFixed(2)}</span>;\n\t}\n}\n\nexport default Price;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Price from \"./Components/Price/Price\";\n\nclass App extends React.Component {\n\tstate = {\n\t\tbagsOfCorn: 0,\n\t\tgeese: 0,\n\t\ttotal: 0\n\t}\n\n\tgetTotal(geese, bagsOfCorn) { \n\t\treturn (geese + bagsOfCorn) * 25\n\t}\n\n\tonChangeCornQuantity(number) {\n\t\tlet bagsOfCorn = this.state.bagsOfCorn + number;\n\t\tif (bagsOfCorn < 0) bagsOfCorn = 0;\n\n\t\tthis.setState({ bagsOfCorn, total: this.getTotal(this.state.geese, bagsOfCorn) });\n\t}\n\n\tonChangeGeeseQuantity(number) {\n\t\tlet geese = this.state.geese + number;\n\t\tif (geese < 0) geese = 0;\n\n\t\tthis.setState({ geese, total: this.getTotal(geese, this.state.bagsOfCorn) });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<h1>Ferry Trip Calculator</h1>\n\t\t\t\t<p>\n\t\t\t\t\tFerry Price: <Price price={25}></Price>\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"item-picker\">\n\t\t\t\t\t<h2>Corn</h2>\n\t\t\t\t\t<p id=\"bags-of-corn\">Bags of corn: {this.state.bagsOfCorn}</p>\n\t\t\t\t\t<button id=\"corn-plus-one\" onClick={() => this.onChangeCornQuantity(1)}>+</button>\n\t\t\t\t\t<button onClick={() => this.onChangeCornQuantity(10)}>+10</button>\n\t\t\t\t\t<button onClick={() => this.onChangeCornQuantity(-10)}>-10</button>\n\t\t\t\t\t<button onClick={() => this.onChangeCornQuantity(-1)}>-</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"item-picker\">\n\t\t\t\t\t<h2>Geese</h2>\n\t\t\t\t\t<p id=\"geese\">Geese: {this.state.geese}</p>\n\t\t\t\t\t<button id=\"goose-plus-one\" onClick={() => this.onChangeGeeseQuantity(1)}>+</button>\n\t\t\t\t\t<button onClick={() => this.onChangeGeeseQuantity(10)}>+10</button>\n\t\t\t\t\t<button onClick={() => this.onChangeGeeseQuantity(-10)}>-10</button>\n\t\t\t\t\t<button onClick={() => this.onChangeGeeseQuantity(-1)}>-</button>\n\t\t\t\t</div>\n\n\t\t\t\t{(this.state.geese <= 1 || this.state.bagsOfCorn <= 1) && <div id=\"total\">\n\t\t\t\t\tPrice for ferry: <Price price={this.state.total}></Price>\n\t\t\t\t</div>}\n\n\t\t\t\t{this.state.geese > 1 && this.state.bagsOfCorn > 1 && <div className=\"error\">CANNOT DO FERRY TRIP</div>}\n\t\t\t</main>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}